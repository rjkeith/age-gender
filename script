### LOADING PACKAGES TO RUN ANALYSES ###

LoadPackages <- function(x){ for( i in x ){ if( ! require( i , character.only = TRUE ) ){
  install.packages( i , dependencies = TRUE , repos = "http://cran.us.r-project.org")
  require( i , character.only = TRUE )}}}

LoadPackages(c("ARTool",
                 "data.table",
                 "dplyr",
                 "GPArotation",
                 "here",
                 "lavaan",
                 "nFactors",
                 "Rcsdp",
                 "semTools",
                 "tidyverse",
                 "ggplot2",
                 "lubridate",
                 "GGally",
                 "plotly",
                 "corrplot",
                 "naniar",
                 "mice",
                 "emmeans",
                 "psych",
                 "generalhoslem"))

### IMPORTING MASTER DATASET ###
data_path <- here::here("data.csv")
data <- fread(data_path)[,age := as.factor(age)][,gender := as.factor(gender)]
data <- data %>% mutate_if(is.numeric,as.factor)
data$ID<-as.numeric(data$ID)

### IMPUTING MISSING VALUES ###
init = mice(data, maxit=0)
meth = init$method
predM = init$predictorMatrix
predM[, c("ID", "age", "gender")]=0
meth[c("ID", "age", "gender", "u11")]=""
meth[c("u1", "u2", "u3", "u4", "u5", "u6", "u7", "u8", "u9", "u10", "u12", "u13", "u14", "u15", "u16", "water", "energy", "recycle", "volunteer", "donate", "advocate")]="polr"
set.seed(101)
imputed = mice(data, method = meth, predictorMatrix = predM, m = 5, maxit = 25)
imp <- complete(imputed)
all <- imp[complete.cases(imp), ]

### RE-CODING MEASURES OF ENVIRONMENTAL BEHAVIOR AS BINARY VARIABLES ###
all$water <- as.character(factor(all$water, levels = c("1","2","3","4","5"), labels = c("0","0","0","0","1")))
all$water <- as.numeric(all$water)
all$energy <- as.character(factor(all$energy, levels = c("1","2","3","4","5"), labels = c("0","0","0","0","1")))
all$energy<-as.numeric(all$energy)
all$recycle <- as.character(factor(all$recycle, levels = c("1","2","3","4","5"), labels = c("0","0","0","0","1")))
all$recycle <- as.numeric(all$recycle)
all$volunteer <- as.character(factor(all$volunteer, levels = c("1","2","3","4"), labels = c("0","0","1","1")))
all$volunteer <- as.numeric(all$volunteer)
all$donate <- as.character(factor(all$donate, levels = c("1","2","3","4"), labels = c("0","0","1","1")))
all$donate <- as.numeric(all$donate)
all$advocate <- as.character(factor(all$advocate, levels = c("1","2","3","4"), labels = c("0","0","1","1")))
all$advocate <- as.numeric(all$advocate)

### DETERMINING NUMBER OF FACTORS FOR EXPLORATORY FACTOR ANALYSIS ###
CNI <- all[ , c(4:19), drop = FALSE]
cormat <- lavCor(CNI, ordered = names(CNI), output = "cor")
ev <- eigen(cormat)
ap <- parallel(subject = nrow(CNI), var = ncol(CNI))
nS <- nScree(x = ev$values, aparallel = ap$eigen$qevpea)
plotnScree(nS)

### RUNNING BIFACTOR EXPLORATORY FACTOR ANALYSIS ###
efa <- omega(CNI, nfactors = 3, digits = 3, poly = TRUE, n.obs = 1037)

### DEFINING BIFACTOR MODEL OF CNI ###
mod.cat <- '
f1 =~ u1 + u2 + u3 + u4 + u5 + u6 + u13
f2 =~ u7 + u8 + u9 + u10
f3 =~ u11 + u12 + u14 + u15 + u16
g1 =~ u16 + u15 + u14 + u13 + u12 + u11 + u10 + u9 + u8 + u7 + u6 + u5 + u4 + u3 + u2 + u1
'

### DEFINING AND FITTING DEFAULT CNI MODEL ###
mod.default <- '
f1 =~ u1 + u2 + u3 + u4 + u5 + u6 + u13
f2 =~ u7 + u8 + u9 + u10
f3 =~ u11 + u12 + u13
f4 =~ u14 + u15 + u16
'
fit.default <- cfa(model = mod.default, data = all, parameterization = "theta", estimator = "WLSMV", std.lv = TRUE, ordered = paste0("u", 1:16), orthogonal = TRUE)

### RUNNING CONFIRMATORY FACTOR ANALYSES ###
fit.all <- cfa(model = mod.cat, data = all, parameterization = "theta", estimator = "WLSMV", std.lv = TRUE, ordered = paste0("u", 1:16), orthogonal = TRUE)
gender <- split(all, all$gender)
boys <- gender$M
fit.boys <- cfa(model = mod.cat, data = boys, parameterization = "theta", estimator = "WLSMV", std.lv = TRUE, ordered = paste0("u", 1:16), orthogonal = TRUE)
girls <- gender$F
fit.girls <- cfa(model = mod.cat, data = girls, parameterization = "theta", estimator = "WLSMV", std.lv = TRUE, ordered = paste0("u", 1:16), orthogonal = TRUE)

### FITTING CONFIGURAL MODEL ###
syntax.config <- measEq.syntax(configural.model = mod.cat, data = all, ordered = paste0("u", 1:16), parameterization = "theta", estimator = "WLSMV", ID.fac = "UV", ID.cat = "Wu.Estabrook.2016", group = "gender", orthogonal = TRUE)
mod.config <- as.character(syntax.config)
fit.config <- cfa(mod.config, data = all, ordered = paste0("u", 1:16), parameterization = "theta", group = "gender")

### FITTING THRESHOLD MODEL ###
syntax.thresh <- measEq.syntax(configural.model = mod.cat, data = all, ordered = paste0("u", 1:16), parameterization = "theta", estimator = "WLSMV", ID.fac = "UV", ID.cat = "Wu.Estabrook.2016", group = "gender", orthogonal = TRUE, group.equal = "thresholds")
mod.thresh <- as.character(syntax.thresh)
fit.thresh <- cfa(mod.thresh, data = all, ordered = paste0("u", 1:16), parameterization = "theta", group = "gender")

### FITTING METRIC MODEL ###
syntax.metric <- measEq.syntax(configural.model = mod.cat, data = all, ordered = paste0("u", 1:16), parameterization = "theta", estimator = "WLSMV", ID.fac = "UV", ID.cat = "Wu.Estabrook.2016", group = "gender", orthogonal = TRUE, group.equal = c("thresholds","loadings"))
mod.metric <- as.character(syntax.metric)
fit.metric <- cfa(mod.metric, data = all, ordered = paste0("u", 1:16), parameterization = "theta", group = "gender")

### FITTING SCALAR MODEL ###
syntax.scalar <- measEq.syntax(configural.model = mod.cat, data = all, ordered = paste0("u", 1:16), parameterization = "theta", estimator = "WLSMV", ID.fac = "UV", ID.cat = "Wu.Estabrook.2016", group = "gender", orthogonal = TRUE, group.equal = c("thresholds","loadings","intercepts"))
cat(as.character(syntax.scalar))
mod.scalar <- '
## loadings:
f1 =~ c(NA, NA)*u1 + c(lambda.1_1, lambda.1_1)*u1
f1 =~ c(NA, NA)*u2 + c(lambda.2_1, lambda.2_1)*u2
f1 =~ c(NA, NA)*u3 + c(lambda.3_1, lambda.3_1)*u3
f1 =~ c(NA, NA)*u4 + c(lambda.4_1, lambda.4_1)*u4
f1 =~ c(NA, NA)*u5 + c(lambda.5_1, lambda.5_1)*u5
f1 =~ c(NA, NA)*u6 + c(lambda.6_1, lambda.6_1)*u6
f1 =~ c(NA, NA)*u13 + c(lambda.7_1, lambda.7_1)*u13
f2 =~ c(NA, NA)*u7 + c(lambda.8_2, lambda.8_2)*u7
f2 =~ c(NA, NA)*u8 + c(lambda.9_2, lambda.9_2)*u8
f2 =~ c(NA, NA)*u9 + c(lambda.10_2, lambda.10_2)*u9
f2 =~ c(NA, NA)*u10 + c(lambda.11_2, lambda.11_2)*u10
f3 =~ c(NA, NA)*u11 + c(lambda.12_3, lambda.12_3)*u11
f3 =~ c(NA, NA)*u12 + c(lambda.13_3, lambda.13_3)*u12
f3 =~ c(NA, NA)*u14 + c(lambda.14_3, lambda.14_3)*u14
f3 =~ c(NA, NA)*u15 + c(lambda.15_3, lambda.15_3)*u15
f3 =~ c(NA, NA)*u16 + c(lambda.16_3, lambda.16_3)*u16
g1 =~ c(NA, NA)*u1 + c(lambda.1_4, lambda.1_4)*u1
g1 =~ c(NA, NA)*u2 + c(lambda.2_4, lambda.2_4)*u2
g1 =~ c(NA, NA)*u3 + c(lambda.3_4, lambda.3_4)*u3
g1 =~ c(NA, NA)*u4 + c(lambda.4_4, lambda.4_4)*u4
g1 =~ c(NA, NA)*u5 + c(lambda.5_4, lambda.5_4)*u5
g1 =~ c(NA, NA)*u6 + c(lambda.6_4, lambda.6_4)*u6
g1 =~ c(NA, NA)*u13 + c(lambda.7_4, lambda.7_4)*u13
g1 =~ c(NA, NA)*u7 + c(lambda.8_4, lambda.8_4)*u7
g1 =~ c(NA, NA)*u8 + c(lambda.9_4, lambda.9_4)*u8
g1 =~ c(NA, NA)*u9 + c(lambda.10_4, lambda.10_4)*u9
g1 =~ c(NA, NA)*u10 + c(lambda.11_4, lambda.11_4)*u10
g1 =~ c(NA, NA)*u11 + c(lambda.12_4, lambda.12_4)*u11
g1 =~ c(NA, NA)*u12 + c(lambda.13_4, lambda.13_4)*u12
g1 =~ c(NA, NA)*u14 + c(lambda.14_4, lambda.14_4)*u14
g1 =~ c(NA, NA)*u15 + c(lambda.15_4, lambda.15_4)*u15
g1 =~ c(NA, NA)*u16 + c(lambda.16_4, lambda.16_4)*u16
## thresholds:
u1 | c(NA, NA)*t1 + c(u1.thr1, u1.thr1)*t1
u1 | c(NA, NA)*t2 + c(u1.thr2, u1.thr2)*t2
u1 | c(NA, NA)*t3 + c(u1.thr3, u1.thr3)*t3
u1 | c(NA, NA)*t4 + c(u1.thr4, u1.thr4)*t4
u2 | c(NA, NA)*t1 + c(u2.thr1, u2.thr1)*t1
u2 | c(NA, NA)*t2 + c(u2.thr2, u2.thr2)*t2
u2 | c(NA, NA)*t3 + c(u2.thr3, u2.thr3)*t3
u2 | c(NA, NA)*t4 + c(u2.thr4, u2.thr4)*t4
u3 | c(NA, NA)*t1 + c(u3.thr1, u3.thr1)*t1
u3 | c(NA, NA)*t2 + c(u3.thr2, u3.thr2)*t2
u3 | c(NA, NA)*t3 + c(u3.thr3, u3.thr3)*t3
u3 | c(NA, NA)*t4 + c(u3.thr4, u3.thr4)*t4
u4 | c(NA, NA)*t1 + c(u4.thr1, u4.thr1)*t1
u4 | c(NA, NA)*t2 + c(u4.thr2, u4.thr2)*t2
u4 | c(NA, NA)*t3 + c(u4.thr3, u4.thr3)*t3
u4 | c(NA, NA)*t4 + c(u4.thr4, u4.thr4)*t4
u5 | c(NA, NA)*t1 + c(u5.thr1, u5.thr1)*t1
u5 | c(NA, NA)*t2 + c(u5.thr2, u5.thr2)*t2
u5 | c(NA, NA)*t3 + c(u5.thr3, u5.thr3)*t3
u5 | c(NA, NA)*t4 + c(u5.thr4, u5.thr4)*t4
u6 | c(NA, NA)*t1 + c(u6.thr1, u6.thr1)*t1
u6 | c(NA, NA)*t2 + c(u6.thr2, u6.thr2)*t2
u6 | c(NA, NA)*t3 + c(u6.thr3, u6.thr3)*t3
u6 | c(NA, NA)*t4 + c(u6.thr4, u6.thr4)*t4
u13 | c(NA, NA)*t1 + c(u13.thr1, u13.thr1)*t1
u13 | c(NA, NA)*t2 + c(u13.thr2, u13.thr2)*t2
u13 | c(NA, NA)*t3 + c(u13.thr3, u13.thr3)*t3
u13 | c(NA, NA)*t4 + c(u13.thr4, u13.thr4)*t4
u7 | c(NA, NA)*t1 + c(u7.thr1, u7.thr1)*t1
u7 | c(NA, NA)*t2 + c(u7.thr2, u7.thr2)*t2
u7 | c(NA, NA)*t3 + c(u7.thr3, u7.thr3)*t3
u7 | c(NA, NA)*t4 + c(u7.thr4, u7.thr4)*t4
u8 | c(NA, NA)*t1 + c(u8.thr1, u8.thr1)*t1
u8 | c(NA, NA)*t2 + c(u8.thr2, u8.thr2)*t2
u8 | c(NA, NA)*t3 + c(u8.thr3, u8.thr3)*t3
u8 | c(NA, NA)*t4 + c(u8.thr4, u8.thr4)*t4
u9 | c(NA, NA)*t1 + c(u9.thr1, u9.thr1)*t1
u9 | c(NA, NA)*t2 + c(u9.thr2, u9.thr2)*t2
u9 | c(NA, NA)*t3 + c(u9.thr3, u9.thr3)*t3
u9 | c(NA, NA)*t4 + c(u9.thr4, u9.thr4)*t4
u10 | c(NA, NA)*t1 + c(u10.thr1, u10.thr1)*t1
u10 | c(NA, NA)*t2 + c(u10.thr2, u10.thr2)*t2
u10 | c(NA, NA)*t3 + c(u10.thr3, u10.thr3)*t3
u10 | c(NA, NA)*t4 + c(u10.thr4, u10.thr4)*t4
u11 | c(NA, NA)*t1 + c(u11.thr1, u11.thr1)*t1
u11 | c(NA, NA)*t2 + c(u11.thr2, u11.thr2)*t2
u11 | c(NA, NA)*t3 + c(u11.thr3, u11.thr3)*t3
u11 | c(NA, NA)*t4 + c(u11.thr4, u11.thr4)*t4
u12 | c(NA, NA)*t1 + c(u12.thr1, u12.thr1)*t1
u12 | c(NA, NA)*t2 + c(u12.thr2, u12.thr2)*t2
u12 | c(NA, NA)*t3 + c(u12.thr3, u12.thr3)*t3
u12 | c(NA, NA)*t4 + c(u12.thr4, u12.thr4)*t4
u14 | c(NA, NA)*t1 + c(u14.thr1, u14.thr1)*t1
u14 | c(NA, NA)*t2 + c(u14.thr2, u14.thr2)*t2
u14 | c(NA, NA)*t3 + c(u14.thr3, u14.thr3)*t3
u14 | c(NA, NA)*t4 + c(u14.thr4, u14.thr4)*t4
u15 | c(NA, NA)*t1 + c(u15.thr1, u15.thr1)*t1
u15 | c(NA, NA)*t2 + c(u15.thr2, u15.thr2)*t2
u15 | c(NA, NA)*t3 + c(u15.thr3, u15.thr3)*t3
u15 | c(NA, NA)*t4 + c(u15.thr4, u15.thr4)*t4
u16 | c(NA, NA)*t1 + c(u16.thr1, u16.thr1)*t1
u16 | c(NA, NA)*t2 + c(u16.thr2, u16.thr2)*t2
u16 | c(NA, NA)*t3 + c(u16.thr3, u16.thr3)*t3
u16 | c(NA, NA)*t4 + c(u16.thr4, u16.thr4)*t4
## intercepts:
u1 ~ c(nu.1, nu.1)*1 + c(0, 0)*1
u2 ~ c(nu.2, nu.2)*1 + c(0, 0)*1
u3 ~ c(nu.3, nu.3)*1 + c(0, 0)*1
u4 ~ c(nu.4, nu.4)*1 + c(0, 0)*1
u5 ~ c(nu.5, nu.5)*1 + c(0, 0)*1
u6 ~ c(nu.6, nu.6)*1 + c(0, 0)*1
u13 ~ c(nu.7, nu.7)*1 + c(0, 0)*1
u7 ~ c(nu.8, nu.8)*1 + c(0, 0)*1
u8 ~ c(nu.9, nu.9)*1 + c(0, 0)*1
u9 ~ c(nu.10, nu.10)*1 + c(0, 0)*1
u10 ~ c(nu.11, nu.11)*1 + c(0, 0)*1
u11 ~ c(nu.12, nu.12)*1 + c(0, 0)*1
u12 ~ c(nu.13, nu.13)*1 + c(0, 0)*1
u14 ~ c(nu.14, nu.14)*1 + c(0, 0)*1
u15 ~ c(nu.15, nu.15)*1 + c(0, 0)*1
u16 ~ c(nu.16, nu.16)*1 + c(0, 0)*1
## unique-factor variances:
u1 ~~ c(1, NA)*u1 + c(theta.1_1.g1, theta.1_1.g2)*u1
u2 ~~ c(1, NA)*u2 + c(theta.2_2.g1, theta.2_2.g2)*u2
u3 ~~ c(1, NA)*u3 + c(theta.3_3.g1, theta.3_3.g2)*u3
u4 ~~ c(1, NA)*u4 + c(theta.4_4.g1, theta.4_4.g2)*u4
u5 ~~ c(1, NA)*u5 + c(theta.5_5.g1, theta.5_5.g2)*u5
u6 ~~ c(1, NA)*u6 + c(theta.6_6.g1, theta.6_6.g2)*u6
u13 ~~ c(1, NA)*u13 + c(theta.7_7.g1, theta.7_7.g2)*u13
u7 ~~ c(1, NA)*u7 + c(theta.8_8.g1, theta.8_8.g2)*u7
u8 ~~ c(1, NA)*u8 + c(theta.9_9.g1, theta.9_9.g2)*u8
u9 ~~ c(1, NA)*u9 + c(theta.10_10.g1, theta.10_10.g2)*u9
u10 ~~ c(1, NA)*u10 + c(theta.11_11.g1, theta.11_11.g2)*u10
u11 ~~ c(1, NA)*u11 + c(theta.12_12.g1, theta.12_12.g2)*u11
u12 ~~ c(1, NA)*u12 + c(theta.13_13.g1, theta.13_13.g2)*u12
u14 ~~ c(1, NA)*u14 + c(theta.14_14.g1, theta.14_14.g2)*u14
u15 ~~ c(1, NA)*u15 + c(theta.15_15.g1, theta.15_15.g2)*u15
u16 ~~ c(1, NA)*u16 + c(theta.16_16.g1, theta.16_16.g2)*u16
## latent means/intercepts:
f1 ~ c(alpha.1.g1, alpha.1.g2)*1 + c(0, NA)*1
f2 ~ c(alpha.2.g1, alpha.2.g2)*1 + c(0, NA)*1
f3 ~ c(alpha.3.g1, alpha.3.g2)*1 + c(0, NA)*1
g1 ~ c(alpha.4.g1, alpha.4.g2)*1 + c(0, NA)*1
## common-factor variances:
f1 ~~ c(1, NA)*f1 + c(psi.1_1.g1, psi.1_1.g2)*f1
f2 ~~ c(1, NA)*f2 + c(psi.2_2.g1, psi.2_2.g2)*f2
f3 ~~ c(1, NA)*f3 + c(psi.3_3.g1, psi.3_3.g2)*f3
g1 ~~ c(1, NA)*g1 + c(psi.4_4.g1, psi.4_4.g2)*g1
## common-factor covariances:
f1 ~~ c(0, 0)*f2 + c(psi.2_1.g1, psi.2_1.g2)*f2
f1 ~~ c(0, 0)*f3 + c(psi.3_1.g1, psi.3_1.g2)*f3
f1 ~~ c(0, 0)*g1 + c(psi.4_1.g1, psi.4_1.g2)*g1
f2 ~~ c(0, 0)*f3 + c(psi.3_2.g1, psi.3_2.g2)*f3
f2 ~~ c(0, 0)*g1 + c(psi.4_2.g1, psi.4_2.g2)*g1
f3 ~~ c(0, 0)*g1 + c(psi.4_3.g1, psi.4_3.g2)*g1
'
fit.scalar <- cfa(mod.scalar, data = all, ordered = paste0("u", 1:16), parameterization = "theta", group = "gender")

### COMPARING NESTED MODEL FITS ###
compareFit(fit.config,fit.thresh,fit.metric,fit.scalar)

### DETERMINING FIRST ITEM INTERCEPT TO FREE ###
intercept.1 <- miPowerFit(fit.scalar)

### FITTING PARTIALLY INVARIANT SCALAR MODEL WITH ONE FREED INTERCEPT ###
syntax.scalar.p1 <- measEq.syntax(configural.model = mod.cat, data = all, ordered = paste0("u", 1:16), parameterization = "theta", estimator = "WLSMV", ID.fac = "UV", ID.cat = "Wu.Estabrook.2016", group = "gender", orthogonal = TRUE, group.equal = c("thresholds","loadings","intercepts"), group.partial = c("u1 ~1"))
cat(as.character(syntax.scalar.p1))
mod.scalar.p1 <- '
## loadings:
f1 =~ c(NA, NA)*u1 + c(lambda.1_1, lambda.1_1)*u1
f1 =~ c(NA, NA)*u2 + c(lambda.2_1, lambda.2_1)*u2
f1 =~ c(NA, NA)*u3 + c(lambda.3_1, lambda.3_1)*u3
f1 =~ c(NA, NA)*u4 + c(lambda.4_1, lambda.4_1)*u4
f1 =~ c(NA, NA)*u5 + c(lambda.5_1, lambda.5_1)*u5
f1 =~ c(NA, NA)*u6 + c(lambda.6_1, lambda.6_1)*u6
f1 =~ c(NA, NA)*u13 + c(lambda.7_1, lambda.7_1)*u13
f2 =~ c(NA, NA)*u7 + c(lambda.8_2, lambda.8_2)*u7
f2 =~ c(NA, NA)*u8 + c(lambda.9_2, lambda.9_2)*u8
f2 =~ c(NA, NA)*u9 + c(lambda.10_2, lambda.10_2)*u9
f2 =~ c(NA, NA)*u10 + c(lambda.11_2, lambda.11_2)*u10
f3 =~ c(NA, NA)*u11 + c(lambda.12_3, lambda.12_3)*u11
f3 =~ c(NA, NA)*u12 + c(lambda.13_3, lambda.13_3)*u12
f3 =~ c(NA, NA)*u14 + c(lambda.14_3, lambda.14_3)*u14
f3 =~ c(NA, NA)*u15 + c(lambda.15_3, lambda.15_3)*u15
f3 =~ c(NA, NA)*u16 + c(lambda.16_3, lambda.16_3)*u16
g1 =~ c(NA, NA)*u1 + c(lambda.1_4, lambda.1_4)*u1
g1 =~ c(NA, NA)*u2 + c(lambda.2_4, lambda.2_4)*u2
g1 =~ c(NA, NA)*u3 + c(lambda.3_4, lambda.3_4)*u3
g1 =~ c(NA, NA)*u4 + c(lambda.4_4, lambda.4_4)*u4
g1 =~ c(NA, NA)*u5 + c(lambda.5_4, lambda.5_4)*u5
g1 =~ c(NA, NA)*u6 + c(lambda.6_4, lambda.6_4)*u6
g1 =~ c(NA, NA)*u13 + c(lambda.7_4, lambda.7_4)*u13
g1 =~ c(NA, NA)*u7 + c(lambda.8_4, lambda.8_4)*u7
g1 =~ c(NA, NA)*u8 + c(lambda.9_4, lambda.9_4)*u8
g1 =~ c(NA, NA)*u9 + c(lambda.10_4, lambda.10_4)*u9
g1 =~ c(NA, NA)*u10 + c(lambda.11_4, lambda.11_4)*u10
g1 =~ c(NA, NA)*u11 + c(lambda.12_4, lambda.12_4)*u11
g1 =~ c(NA, NA)*u12 + c(lambda.13_4, lambda.13_4)*u12
g1 =~ c(NA, NA)*u14 + c(lambda.14_4, lambda.14_4)*u14
g1 =~ c(NA, NA)*u15 + c(lambda.15_4, lambda.15_4)*u15
g1 =~ c(NA, NA)*u16 + c(lambda.16_4, lambda.16_4)*u16
## thresholds:
u1 | c(NA, NA)*t1 + c(u1.thr1, u1.thr1)*t1
u1 | c(NA, NA)*t2 + c(u1.thr2, u1.thr2)*t2
u1 | c(NA, NA)*t3 + c(u1.thr3, u1.thr3)*t3
u1 | c(NA, NA)*t4 + c(u1.thr4, u1.thr4)*t4
u2 | c(NA, NA)*t1 + c(u2.thr1, u2.thr1)*t1
u2 | c(NA, NA)*t2 + c(u2.thr2, u2.thr2)*t2
u2 | c(NA, NA)*t3 + c(u2.thr3, u2.thr3)*t3
u2 | c(NA, NA)*t4 + c(u2.thr4, u2.thr4)*t4
u3 | c(NA, NA)*t1 + c(u3.thr1, u3.thr1)*t1
u3 | c(NA, NA)*t2 + c(u3.thr2, u3.thr2)*t2
u3 | c(NA, NA)*t3 + c(u3.thr3, u3.thr3)*t3
u3 | c(NA, NA)*t4 + c(u3.thr4, u3.thr4)*t4
u4 | c(NA, NA)*t1 + c(u4.thr1, u4.thr1)*t1
u4 | c(NA, NA)*t2 + c(u4.thr2, u4.thr2)*t2
u4 | c(NA, NA)*t3 + c(u4.thr3, u4.thr3)*t3
u4 | c(NA, NA)*t4 + c(u4.thr4, u4.thr4)*t4
u5 | c(NA, NA)*t1 + c(u5.thr1, u5.thr1)*t1
u5 | c(NA, NA)*t2 + c(u5.thr2, u5.thr2)*t2
u5 | c(NA, NA)*t3 + c(u5.thr3, u5.thr3)*t3
u5 | c(NA, NA)*t4 + c(u5.thr4, u5.thr4)*t4
u6 | c(NA, NA)*t1 + c(u6.thr1, u6.thr1)*t1
u6 | c(NA, NA)*t2 + c(u6.thr2, u6.thr2)*t2
u6 | c(NA, NA)*t3 + c(u6.thr3, u6.thr3)*t3
u6 | c(NA, NA)*t4 + c(u6.thr4, u6.thr4)*t4
u13 | c(NA, NA)*t1 + c(u13.thr1, u13.thr1)*t1
u13 | c(NA, NA)*t2 + c(u13.thr2, u13.thr2)*t2
u13 | c(NA, NA)*t3 + c(u13.thr3, u13.thr3)*t3
u13 | c(NA, NA)*t4 + c(u13.thr4, u13.thr4)*t4
u7 | c(NA, NA)*t1 + c(u7.thr1, u7.thr1)*t1
u7 | c(NA, NA)*t2 + c(u7.thr2, u7.thr2)*t2
u7 | c(NA, NA)*t3 + c(u7.thr3, u7.thr3)*t3
u7 | c(NA, NA)*t4 + c(u7.thr4, u7.thr4)*t4
u8 | c(NA, NA)*t1 + c(u8.thr1, u8.thr1)*t1
u8 | c(NA, NA)*t2 + c(u8.thr2, u8.thr2)*t2
u8 | c(NA, NA)*t3 + c(u8.thr3, u8.thr3)*t3
u8 | c(NA, NA)*t4 + c(u8.thr4, u8.thr4)*t4
u9 | c(NA, NA)*t1 + c(u9.thr1, u9.thr1)*t1
u9 | c(NA, NA)*t2 + c(u9.thr2, u9.thr2)*t2
u9 | c(NA, NA)*t3 + c(u9.thr3, u9.thr3)*t3
u9 | c(NA, NA)*t4 + c(u9.thr4, u9.thr4)*t4
u10 | c(NA, NA)*t1 + c(u10.thr1, u10.thr1)*t1
u10 | c(NA, NA)*t2 + c(u10.thr2, u10.thr2)*t2
u10 | c(NA, NA)*t3 + c(u10.thr3, u10.thr3)*t3
u10 | c(NA, NA)*t4 + c(u10.thr4, u10.thr4)*t4
u11 | c(NA, NA)*t1 + c(u11.thr1, u11.thr1)*t1
u11 | c(NA, NA)*t2 + c(u11.thr2, u11.thr2)*t2
u11 | c(NA, NA)*t3 + c(u11.thr3, u11.thr3)*t3
u11 | c(NA, NA)*t4 + c(u11.thr4, u11.thr4)*t4
u12 | c(NA, NA)*t1 + c(u12.thr1, u12.thr1)*t1
u12 | c(NA, NA)*t2 + c(u12.thr2, u12.thr2)*t2
u12 | c(NA, NA)*t3 + c(u12.thr3, u12.thr3)*t3
u12 | c(NA, NA)*t4 + c(u12.thr4, u12.thr4)*t4
u14 | c(NA, NA)*t1 + c(u14.thr1, u14.thr1)*t1
u14 | c(NA, NA)*t2 + c(u14.thr2, u14.thr2)*t2
u14 | c(NA, NA)*t3 + c(u14.thr3, u14.thr3)*t3
u14 | c(NA, NA)*t4 + c(u14.thr4, u14.thr4)*t4
u15 | c(NA, NA)*t1 + c(u15.thr1, u15.thr1)*t1
u15 | c(NA, NA)*t2 + c(u15.thr2, u15.thr2)*t2
u15 | c(NA, NA)*t3 + c(u15.thr3, u15.thr3)*t3
u15 | c(NA, NA)*t4 + c(u15.thr4, u15.thr4)*t4
u16 | c(NA, NA)*t1 + c(u16.thr1, u16.thr1)*t1
u16 | c(NA, NA)*t2 + c(u16.thr2, u16.thr2)*t2
u16 | c(NA, NA)*t3 + c(u16.thr3, u16.thr3)*t3
u16 | c(NA, NA)*t4 + c(u16.thr4, u16.thr4)*t4
## intercepts:
u1 ~ c(nu.1.g1, nu.1.g2)*1 + c(0, NA)*1
u2 ~ c(nu.2, nu.2)*1 + c(0, 0)*1
u3 ~ c(nu.3, nu.3)*1 + c(0, 0)*1
u4 ~ c(nu.4, nu.4)*1 + c(0, 0)*1
u5 ~ c(nu.5, nu.5)*1 + c(0, 0)*1
u6 ~ c(nu.6, nu.6)*1 + c(0, 0)*1
u13 ~ c(nu.7, nu.7)*1 + c(0, 0)*1
u7 ~ c(nu.8, nu.8)*1 + c(0, 0)*1
u8 ~ c(nu.9, nu.9)*1 + c(0, 0)*1
u9 ~ c(nu.10, nu.10)*1 + c(0, 0)*1
u10 ~ c(nu.11, nu.11)*1 + c(0, 0)*1
u11 ~ c(nu.12, nu.12)*1 + c(0, 0)*1
u12 ~ c(nu.13, nu.13)*1 + c(0, 0)*1
u14 ~ c(nu.14, nu.14)*1 + c(0, 0)*1
u15 ~ c(nu.15, nu.15)*1 + c(0, 0)*1
u16 ~ c(nu.16, nu.16)*1 + c(0, 0)*1
## unique-factor variances:
u1 ~~ c(1, NA)*u1 + c(theta.1_1.g1, theta.1_1.g2)*u1
u2 ~~ c(1, NA)*u2 + c(theta.2_2.g1, theta.2_2.g2)*u2
u3 ~~ c(1, NA)*u3 + c(theta.3_3.g1, theta.3_3.g2)*u3
u4 ~~ c(1, NA)*u4 + c(theta.4_4.g1, theta.4_4.g2)*u4
u5 ~~ c(1, NA)*u5 + c(theta.5_5.g1, theta.5_5.g2)*u5
u6 ~~ c(1, NA)*u6 + c(theta.6_6.g1, theta.6_6.g2)*u6
u13 ~~ c(1, NA)*u13 + c(theta.7_7.g1, theta.7_7.g2)*u13
u7 ~~ c(1, NA)*u7 + c(theta.8_8.g1, theta.8_8.g2)*u7
u8 ~~ c(1, NA)*u8 + c(theta.9_9.g1, theta.9_9.g2)*u8
u9 ~~ c(1, NA)*u9 + c(theta.10_10.g1, theta.10_10.g2)*u9
u10 ~~ c(1, NA)*u10 + c(theta.11_11.g1, theta.11_11.g2)*u10
u11 ~~ c(1, NA)*u11 + c(theta.12_12.g1, theta.12_12.g2)*u11
u12 ~~ c(1, NA)*u12 + c(theta.13_13.g1, theta.13_13.g2)*u12
u14 ~~ c(1, NA)*u14 + c(theta.14_14.g1, theta.14_14.g2)*u14
u15 ~~ c(1, NA)*u15 + c(theta.15_15.g1, theta.15_15.g2)*u15
u16 ~~ c(1, NA)*u16 + c(theta.16_16.g1, theta.16_16.g2)*u16
## latent means/intercepts:
f1 ~ c(alpha.1.g1, alpha.1.g2)*1 + c(0, NA)*1
f2 ~ c(alpha.2.g1, alpha.2.g2)*1 + c(0, NA)*1
f3 ~ c(alpha.3.g1, alpha.3.g2)*1 + c(0, NA)*1
g1 ~ c(alpha.4.g1, alpha.4.g2)*1 + c(0, NA)*1
## common-factor variances:
f1 ~~ c(1, NA)*f1 + c(psi.1_1.g1, psi.1_1.g2)*f1
f2 ~~ c(1, NA)*f2 + c(psi.2_2.g1, psi.2_2.g2)*f2
f3 ~~ c(1, NA)*f3 + c(psi.3_3.g1, psi.3_3.g2)*f3
g1 ~~ c(1, NA)*g1 + c(psi.4_4.g1, psi.4_4.g2)*g1
## common-factor covariances:
f1 ~~ c(0, 0)*f2 + c(psi.2_1.g1, psi.2_1.g2)*f2
f1 ~~ c(0, 0)*f3 + c(psi.3_1.g1, psi.3_1.g2)*f3
f1 ~~ c(0, 0)*g1 + c(psi.4_1.g1, psi.4_1.g2)*g1
f2 ~~ c(0, 0)*f3 + c(psi.3_2.g1, psi.3_2.g2)*f3
f2 ~~ c(0, 0)*g1 + c(psi.4_2.g1, psi.4_2.g2)*g1
f3 ~~ c(0, 0)*g1 + c(psi.4_3.g1, psi.4_3.g2)*g1
'
fit.scalar.p1 <- cfa(mod.scalar.p1, data = all, ordered = paste0("u", 1:16), parameterization = "theta", group = "gender")

### COMPARING FIT OF PARTIALLY INVARIANT SCALAR MODEL AND METRIC MODEL ###
compareFit(fit.metric,fit.scalar.p1)

### DETERMINING SECOND ITEM INTERCEPT TO FREE ###
intercept.2 <- miPowerFit(fit.scalar.p1)

### FITTING PARTIALLY INVARIANT SCALAR MODEL WITH TWO FREED INTERCEPTS ###
syntax.scalar.p2 <- measEq.syntax(configural.model = mod.cat, data = all, ordered = paste0("u", 1:16), parameterization = "theta", estimator = "WLSMV", ID.fac = "UV", ID.cat = "Wu.Estabrook.2016", group = "gender", orthogonal = TRUE, group.equal = c("thresholds","loadings","intercepts"), group.partial = c("u1 ~1", "u6 ~1"))
cat(as.character(syntax.scalar.p2))
mod.scalar.p2 <- '
## loadings:
f1 =~ c(NA, NA)*u1 + c(lambda.1_1, lambda.1_1)*u1
f1 =~ c(NA, NA)*u2 + c(lambda.2_1, lambda.2_1)*u2
f1 =~ c(NA, NA)*u3 + c(lambda.3_1, lambda.3_1)*u3
f1 =~ c(NA, NA)*u4 + c(lambda.4_1, lambda.4_1)*u4
f1 =~ c(NA, NA)*u5 + c(lambda.5_1, lambda.5_1)*u5
f1 =~ c(NA, NA)*u6 + c(lambda.6_1, lambda.6_1)*u6
f1 =~ c(NA, NA)*u13 + c(lambda.7_1, lambda.7_1)*u13
f2 =~ c(NA, NA)*u7 + c(lambda.8_2, lambda.8_2)*u7
f2 =~ c(NA, NA)*u8 + c(lambda.9_2, lambda.9_2)*u8
f2 =~ c(NA, NA)*u9 + c(lambda.10_2, lambda.10_2)*u9
f2 =~ c(NA, NA)*u10 + c(lambda.11_2, lambda.11_2)*u10
f3 =~ c(NA, NA)*u11 + c(lambda.12_3, lambda.12_3)*u11
f3 =~ c(NA, NA)*u12 + c(lambda.13_3, lambda.13_3)*u12
f3 =~ c(NA, NA)*u14 + c(lambda.14_3, lambda.14_3)*u14
f3 =~ c(NA, NA)*u15 + c(lambda.15_3, lambda.15_3)*u15
f3 =~ c(NA, NA)*u16 + c(lambda.16_3, lambda.16_3)*u16
g1 =~ c(NA, NA)*u1 + c(lambda.1_4, lambda.1_4)*u1
g1 =~ c(NA, NA)*u2 + c(lambda.2_4, lambda.2_4)*u2
g1 =~ c(NA, NA)*u3 + c(lambda.3_4, lambda.3_4)*u3
g1 =~ c(NA, NA)*u4 + c(lambda.4_4, lambda.4_4)*u4
g1 =~ c(NA, NA)*u5 + c(lambda.5_4, lambda.5_4)*u5
g1 =~ c(NA, NA)*u6 + c(lambda.6_4, lambda.6_4)*u6
g1 =~ c(NA, NA)*u13 + c(lambda.7_4, lambda.7_4)*u13
g1 =~ c(NA, NA)*u7 + c(lambda.8_4, lambda.8_4)*u7
g1 =~ c(NA, NA)*u8 + c(lambda.9_4, lambda.9_4)*u8
g1 =~ c(NA, NA)*u9 + c(lambda.10_4, lambda.10_4)*u9
g1 =~ c(NA, NA)*u10 + c(lambda.11_4, lambda.11_4)*u10
g1 =~ c(NA, NA)*u11 + c(lambda.12_4, lambda.12_4)*u11
g1 =~ c(NA, NA)*u12 + c(lambda.13_4, lambda.13_4)*u12
g1 =~ c(NA, NA)*u14 + c(lambda.14_4, lambda.14_4)*u14
g1 =~ c(NA, NA)*u15 + c(lambda.15_4, lambda.15_4)*u15
g1 =~ c(NA, NA)*u16 + c(lambda.16_4, lambda.16_4)*u16
## thresholds:
u1 | c(NA, NA)*t1 + c(u1.thr1, u1.thr1)*t1
u1 | c(NA, NA)*t2 + c(u1.thr2, u1.thr2)*t2
u1 | c(NA, NA)*t3 + c(u1.thr3, u1.thr3)*t3
u1 | c(NA, NA)*t4 + c(u1.thr4, u1.thr4)*t4
u2 | c(NA, NA)*t1 + c(u2.thr1, u2.thr1)*t1
u2 | c(NA, NA)*t2 + c(u2.thr2, u2.thr2)*t2
u2 | c(NA, NA)*t3 + c(u2.thr3, u2.thr3)*t3
u2 | c(NA, NA)*t4 + c(u2.thr4, u2.thr4)*t4
u3 | c(NA, NA)*t1 + c(u3.thr1, u3.thr1)*t1
u3 | c(NA, NA)*t2 + c(u3.thr2, u3.thr2)*t2
u3 | c(NA, NA)*t3 + c(u3.thr3, u3.thr3)*t3
u3 | c(NA, NA)*t4 + c(u3.thr4, u3.thr4)*t4
u4 | c(NA, NA)*t1 + c(u4.thr1, u4.thr1)*t1
u4 | c(NA, NA)*t2 + c(u4.thr2, u4.thr2)*t2
u4 | c(NA, NA)*t3 + c(u4.thr3, u4.thr3)*t3
u4 | c(NA, NA)*t4 + c(u4.thr4, u4.thr4)*t4
u5 | c(NA, NA)*t1 + c(u5.thr1, u5.thr1)*t1
u5 | c(NA, NA)*t2 + c(u5.thr2, u5.thr2)*t2
u5 | c(NA, NA)*t3 + c(u5.thr3, u5.thr3)*t3
u5 | c(NA, NA)*t4 + c(u5.thr4, u5.thr4)*t4
u6 | c(NA, NA)*t1 + c(u6.thr1, u6.thr1)*t1
u6 | c(NA, NA)*t2 + c(u6.thr2, u6.thr2)*t2
u6 | c(NA, NA)*t3 + c(u6.thr3, u6.thr3)*t3
u6 | c(NA, NA)*t4 + c(u6.thr4, u6.thr4)*t4
u13 | c(NA, NA)*t1 + c(u13.thr1, u13.thr1)*t1
u13 | c(NA, NA)*t2 + c(u13.thr2, u13.thr2)*t2
u13 | c(NA, NA)*t3 + c(u13.thr3, u13.thr3)*t3
u13 | c(NA, NA)*t4 + c(u13.thr4, u13.thr4)*t4
u7 | c(NA, NA)*t1 + c(u7.thr1, u7.thr1)*t1
u7 | c(NA, NA)*t2 + c(u7.thr2, u7.thr2)*t2
u7 | c(NA, NA)*t3 + c(u7.thr3, u7.thr3)*t3
u7 | c(NA, NA)*t4 + c(u7.thr4, u7.thr4)*t4
u8 | c(NA, NA)*t1 + c(u8.thr1, u8.thr1)*t1
u8 | c(NA, NA)*t2 + c(u8.thr2, u8.thr2)*t2
u8 | c(NA, NA)*t3 + c(u8.thr3, u8.thr3)*t3
u8 | c(NA, NA)*t4 + c(u8.thr4, u8.thr4)*t4
u9 | c(NA, NA)*t1 + c(u9.thr1, u9.thr1)*t1
u9 | c(NA, NA)*t2 + c(u9.thr2, u9.thr2)*t2
u9 | c(NA, NA)*t3 + c(u9.thr3, u9.thr3)*t3
u9 | c(NA, NA)*t4 + c(u9.thr4, u9.thr4)*t4
u10 | c(NA, NA)*t1 + c(u10.thr1, u10.thr1)*t1
u10 | c(NA, NA)*t2 + c(u10.thr2, u10.thr2)*t2
u10 | c(NA, NA)*t3 + c(u10.thr3, u10.thr3)*t3
u10 | c(NA, NA)*t4 + c(u10.thr4, u10.thr4)*t4
u11 | c(NA, NA)*t1 + c(u11.thr1, u11.thr1)*t1
u11 | c(NA, NA)*t2 + c(u11.thr2, u11.thr2)*t2
u11 | c(NA, NA)*t3 + c(u11.thr3, u11.thr3)*t3
u11 | c(NA, NA)*t4 + c(u11.thr4, u11.thr4)*t4
u12 | c(NA, NA)*t1 + c(u12.thr1, u12.thr1)*t1
u12 | c(NA, NA)*t2 + c(u12.thr2, u12.thr2)*t2
u12 | c(NA, NA)*t3 + c(u12.thr3, u12.thr3)*t3
u12 | c(NA, NA)*t4 + c(u12.thr4, u12.thr4)*t4
u14 | c(NA, NA)*t1 + c(u14.thr1, u14.thr1)*t1
u14 | c(NA, NA)*t2 + c(u14.thr2, u14.thr2)*t2
u14 | c(NA, NA)*t3 + c(u14.thr3, u14.thr3)*t3
u14 | c(NA, NA)*t4 + c(u14.thr4, u14.thr4)*t4
u15 | c(NA, NA)*t1 + c(u15.thr1, u15.thr1)*t1
u15 | c(NA, NA)*t2 + c(u15.thr2, u15.thr2)*t2
u15 | c(NA, NA)*t3 + c(u15.thr3, u15.thr3)*t3
u15 | c(NA, NA)*t4 + c(u15.thr4, u15.thr4)*t4
u16 | c(NA, NA)*t1 + c(u16.thr1, u16.thr1)*t1
u16 | c(NA, NA)*t2 + c(u16.thr2, u16.thr2)*t2
u16 | c(NA, NA)*t3 + c(u16.thr3, u16.thr3)*t3
u16 | c(NA, NA)*t4 + c(u16.thr4, u16.thr4)*t4
## intercepts:
u1 ~ c(nu.1.g1, nu.1.g2)*1 + c(0, NA)*1
u2 ~ c(nu.2, nu.2)*1 + c(0, 0)*1
u3 ~ c(nu.3, nu.3)*1 + c(0, 0)*1
u4 ~ c(nu.4, nu.4)*1 + c(0, 0)*1
u5 ~ c(nu.5, nu.5)*1 + c(0, 0)*1
u6 ~ c(nu.6.g1, nu.6.g2)*1 + c(0, NA)*1
u13 ~ c(nu.7, nu.7)*1 + c(0, 0)*1
u7 ~ c(nu.8, nu.8)*1 + c(0, 0)*1
u8 ~ c(nu.9, nu.9)*1 + c(0, 0)*1
u9 ~ c(nu.10, nu.10)*1 + c(0, 0)*1
u10 ~ c(nu.11, nu.11)*1 + c(0, 0)*1
u11 ~ c(nu.12, nu.12)*1 + c(0, 0)*1
u12 ~ c(nu.13, nu.13)*1 + c(0, 0)*1
u14 ~ c(nu.14, nu.14)*1 + c(0, 0)*1
u15 ~ c(nu.15, nu.15)*1 + c(0, 0)*1
u16 ~ c(nu.16, nu.16)*1 + c(0, 0)*1
## unique-factor variances:
u1 ~~ c(1, NA)*u1 + c(theta.1_1.g1, theta.1_1.g2)*u1
u2 ~~ c(1, NA)*u2 + c(theta.2_2.g1, theta.2_2.g2)*u2
u3 ~~ c(1, NA)*u3 + c(theta.3_3.g1, theta.3_3.g2)*u3
u4 ~~ c(1, NA)*u4 + c(theta.4_4.g1, theta.4_4.g2)*u4
u5 ~~ c(1, NA)*u5 + c(theta.5_5.g1, theta.5_5.g2)*u5
u6 ~~ c(1, NA)*u6 + c(theta.6_6.g1, theta.6_6.g2)*u6
u13 ~~ c(1, NA)*u13 + c(theta.7_7.g1, theta.7_7.g2)*u13
u7 ~~ c(1, NA)*u7 + c(theta.8_8.g1, theta.8_8.g2)*u7
u8 ~~ c(1, NA)*u8 + c(theta.9_9.g1, theta.9_9.g2)*u8
u9 ~~ c(1, NA)*u9 + c(theta.10_10.g1, theta.10_10.g2)*u9
u10 ~~ c(1, NA)*u10 + c(theta.11_11.g1, theta.11_11.g2)*u10
u11 ~~ c(1, NA)*u11 + c(theta.12_12.g1, theta.12_12.g2)*u11
u12 ~~ c(1, NA)*u12 + c(theta.13_13.g1, theta.13_13.g2)*u12
u14 ~~ c(1, NA)*u14 + c(theta.14_14.g1, theta.14_14.g2)*u14
u15 ~~ c(1, NA)*u15 + c(theta.15_15.g1, theta.15_15.g2)*u15
u16 ~~ c(1, NA)*u16 + c(theta.16_16.g1, theta.16_16.g2)*u16
## latent means/intercepts:
f1 ~ c(alpha.1.g1, alpha.1.g2)*1 + c(0, NA)*1
f2 ~ c(alpha.2.g1, alpha.2.g2)*1 + c(0, NA)*1
f3 ~ c(alpha.3.g1, alpha.3.g2)*1 + c(0, NA)*1
g1 ~ c(alpha.4.g1, alpha.4.g2)*1 + c(0, NA)*1
## common-factor variances:
f1 ~~ c(1, NA)*f1 + c(psi.1_1.g1, psi.1_1.g2)*f1
f2 ~~ c(1, NA)*f2 + c(psi.2_2.g1, psi.2_2.g2)*f2
f3 ~~ c(1, NA)*f3 + c(psi.3_3.g1, psi.3_3.g2)*f3
g1 ~~ c(1, NA)*g1 + c(psi.4_4.g1, psi.4_4.g2)*g1
## common-factor covariances:
f1 ~~ c(0, 0)*f2 + c(psi.2_1.g1, psi.2_1.g2)*f2
f1 ~~ c(0, 0)*f3 + c(psi.3_1.g1, psi.3_1.g2)*f3
f1 ~~ c(0, 0)*g1 + c(psi.4_1.g1, psi.4_1.g2)*g1
f2 ~~ c(0, 0)*f3 + c(psi.3_2.g1, psi.3_2.g2)*f3
f2 ~~ c(0, 0)*g1 + c(psi.4_2.g1, psi.4_2.g2)*g1
f3 ~~ c(0, 0)*g1 + c(psi.4_3.g1, psi.4_3.g2)*g1
'
fit.scalar.p2 <- cfa(mod.scalar.p2, data = all, ordered = paste0("u", 1:16), parameterization = "theta", group = "gender")

### COMPARING FIT OF PARTIALLY INVARIANT SCALAR MODEL AND METRIC MODEL ###
compareFit(fit.metric,fit.scalar.p2)

### DETERMINING THIRD ITEM INTERCEPT TO FREE ###
intercept.3 <- miPowerFit(fit.scalar.p2)

### FITTING PARTIALLYPARTIALLY INVARIANT SCALAR MODEL WITH THREE FREED INTERCEPTS ###
syntax.scalar.p3 <- measEq.syntax(configural.model = mod.cat, data = all, ordered = paste0("u", 1:16), parameterization = "theta", estimator = "WLSMV", ID.fac = "UV", ID.cat = "Wu.Estabrook.2016", group = "gender", orthogonal = TRUE, group.equal = c("thresholds","loadings","intercepts"), group.partial = c("u1 ~1", "u6 ~1", "u2 ~1"))
cat(as.character(syntax.scalar.p3))
mod.scalar.p3 <- '
## loadings:
f1 =~ c(NA, NA)*u1 + c(lambda.1_1, lambda.1_1)*u1
f1 =~ c(NA, NA)*u2 + c(lambda.2_1, lambda.2_1)*u2
f1 =~ c(NA, NA)*u3 + c(lambda.3_1, lambda.3_1)*u3
f1 =~ c(NA, NA)*u4 + c(lambda.4_1, lambda.4_1)*u4
f1 =~ c(NA, NA)*u5 + c(lambda.5_1, lambda.5_1)*u5
f1 =~ c(NA, NA)*u6 + c(lambda.6_1, lambda.6_1)*u6
f1 =~ c(NA, NA)*u13 + c(lambda.7_1, lambda.7_1)*u13
f2 =~ c(NA, NA)*u7 + c(lambda.8_2, lambda.8_2)*u7
f2 =~ c(NA, NA)*u8 + c(lambda.9_2, lambda.9_2)*u8
f2 =~ c(NA, NA)*u9 + c(lambda.10_2, lambda.10_2)*u9
f2 =~ c(NA, NA)*u10 + c(lambda.11_2, lambda.11_2)*u10
f3 =~ c(NA, NA)*u11 + c(lambda.12_3, lambda.12_3)*u11
f3 =~ c(NA, NA)*u12 + c(lambda.13_3, lambda.13_3)*u12
f3 =~ c(NA, NA)*u14 + c(lambda.14_3, lambda.14_3)*u14
f3 =~ c(NA, NA)*u15 + c(lambda.15_3, lambda.15_3)*u15
f3 =~ c(NA, NA)*u16 + c(lambda.16_3, lambda.16_3)*u16
g1 =~ c(NA, NA)*u1 + c(lambda.1_4, lambda.1_4)*u1
g1 =~ c(NA, NA)*u2 + c(lambda.2_4, lambda.2_4)*u2
g1 =~ c(NA, NA)*u3 + c(lambda.3_4, lambda.3_4)*u3
g1 =~ c(NA, NA)*u4 + c(lambda.4_4, lambda.4_4)*u4
g1 =~ c(NA, NA)*u5 + c(lambda.5_4, lambda.5_4)*u5
g1 =~ c(NA, NA)*u6 + c(lambda.6_4, lambda.6_4)*u6
g1 =~ c(NA, NA)*u13 + c(lambda.7_4, lambda.7_4)*u13
g1 =~ c(NA, NA)*u7 + c(lambda.8_4, lambda.8_4)*u7
g1 =~ c(NA, NA)*u8 + c(lambda.9_4, lambda.9_4)*u8
g1 =~ c(NA, NA)*u9 + c(lambda.10_4, lambda.10_4)*u9
g1 =~ c(NA, NA)*u10 + c(lambda.11_4, lambda.11_4)*u10
g1 =~ c(NA, NA)*u11 + c(lambda.12_4, lambda.12_4)*u11
g1 =~ c(NA, NA)*u12 + c(lambda.13_4, lambda.13_4)*u12
g1 =~ c(NA, NA)*u14 + c(lambda.14_4, lambda.14_4)*u14
g1 =~ c(NA, NA)*u15 + c(lambda.15_4, lambda.15_4)*u15
g1 =~ c(NA, NA)*u16 + c(lambda.16_4, lambda.16_4)*u16
## thresholds:
u1 | c(NA, NA)*t1 + c(u1.thr1, u1.thr1)*t1
u1 | c(NA, NA)*t2 + c(u1.thr2, u1.thr2)*t2
u1 | c(NA, NA)*t3 + c(u1.thr3, u1.thr3)*t3
u1 | c(NA, NA)*t4 + c(u1.thr4, u1.thr4)*t4
u2 | c(NA, NA)*t1 + c(u2.thr1, u2.thr1)*t1
u2 | c(NA, NA)*t2 + c(u2.thr2, u2.thr2)*t2
u2 | c(NA, NA)*t3 + c(u2.thr3, u2.thr3)*t3
u2 | c(NA, NA)*t4 + c(u2.thr4, u2.thr4)*t4
u3 | c(NA, NA)*t1 + c(u3.thr1, u3.thr1)*t1
u3 | c(NA, NA)*t2 + c(u3.thr2, u3.thr2)*t2
u3 | c(NA, NA)*t3 + c(u3.thr3, u3.thr3)*t3
u3 | c(NA, NA)*t4 + c(u3.thr4, u3.thr4)*t4
u4 | c(NA, NA)*t1 + c(u4.thr1, u4.thr1)*t1
u4 | c(NA, NA)*t2 + c(u4.thr2, u4.thr2)*t2
u4 | c(NA, NA)*t3 + c(u4.thr3, u4.thr3)*t3
u4 | c(NA, NA)*t4 + c(u4.thr4, u4.thr4)*t4
u5 | c(NA, NA)*t1 + c(u5.thr1, u5.thr1)*t1
u5 | c(NA, NA)*t2 + c(u5.thr2, u5.thr2)*t2
u5 | c(NA, NA)*t3 + c(u5.thr3, u5.thr3)*t3
u5 | c(NA, NA)*t4 + c(u5.thr4, u5.thr4)*t4
u6 | c(NA, NA)*t1 + c(u6.thr1, u6.thr1)*t1
u6 | c(NA, NA)*t2 + c(u6.thr2, u6.thr2)*t2
u6 | c(NA, NA)*t3 + c(u6.thr3, u6.thr3)*t3
u6 | c(NA, NA)*t4 + c(u6.thr4, u6.thr4)*t4
u13 | c(NA, NA)*t1 + c(u13.thr1, u13.thr1)*t1
u13 | c(NA, NA)*t2 + c(u13.thr2, u13.thr2)*t2
u13 | c(NA, NA)*t3 + c(u13.thr3, u13.thr3)*t3
u13 | c(NA, NA)*t4 + c(u13.thr4, u13.thr4)*t4
u7 | c(NA, NA)*t1 + c(u7.thr1, u7.thr1)*t1
u7 | c(NA, NA)*t2 + c(u7.thr2, u7.thr2)*t2
u7 | c(NA, NA)*t3 + c(u7.thr3, u7.thr3)*t3
u7 | c(NA, NA)*t4 + c(u7.thr4, u7.thr4)*t4
u8 | c(NA, NA)*t1 + c(u8.thr1, u8.thr1)*t1
u8 | c(NA, NA)*t2 + c(u8.thr2, u8.thr2)*t2
u8 | c(NA, NA)*t3 + c(u8.thr3, u8.thr3)*t3
u8 | c(NA, NA)*t4 + c(u8.thr4, u8.thr4)*t4
u9 | c(NA, NA)*t1 + c(u9.thr1, u9.thr1)*t1
u9 | c(NA, NA)*t2 + c(u9.thr2, u9.thr2)*t2
u9 | c(NA, NA)*t3 + c(u9.thr3, u9.thr3)*t3
u9 | c(NA, NA)*t4 + c(u9.thr4, u9.thr4)*t4
u10 | c(NA, NA)*t1 + c(u10.thr1, u10.thr1)*t1
u10 | c(NA, NA)*t2 + c(u10.thr2, u10.thr2)*t2
u10 | c(NA, NA)*t3 + c(u10.thr3, u10.thr3)*t3
u10 | c(NA, NA)*t4 + c(u10.thr4, u10.thr4)*t4
u11 | c(NA, NA)*t1 + c(u11.thr1, u11.thr1)*t1
u11 | c(NA, NA)*t2 + c(u11.thr2, u11.thr2)*t2
u11 | c(NA, NA)*t3 + c(u11.thr3, u11.thr3)*t3
u11 | c(NA, NA)*t4 + c(u11.thr4, u11.thr4)*t4
u12 | c(NA, NA)*t1 + c(u12.thr1, u12.thr1)*t1
u12 | c(NA, NA)*t2 + c(u12.thr2, u12.thr2)*t2
u12 | c(NA, NA)*t3 + c(u12.thr3, u12.thr3)*t3
u12 | c(NA, NA)*t4 + c(u12.thr4, u12.thr4)*t4
u14 | c(NA, NA)*t1 + c(u14.thr1, u14.thr1)*t1
u14 | c(NA, NA)*t2 + c(u14.thr2, u14.thr2)*t2
u14 | c(NA, NA)*t3 + c(u14.thr3, u14.thr3)*t3
u14 | c(NA, NA)*t4 + c(u14.thr4, u14.thr4)*t4
u15 | c(NA, NA)*t1 + c(u15.thr1, u15.thr1)*t1
u15 | c(NA, NA)*t2 + c(u15.thr2, u15.thr2)*t2
u15 | c(NA, NA)*t3 + c(u15.thr3, u15.thr3)*t3
u15 | c(NA, NA)*t4 + c(u15.thr4, u15.thr4)*t4
u16 | c(NA, NA)*t1 + c(u16.thr1, u16.thr1)*t1
u16 | c(NA, NA)*t2 + c(u16.thr2, u16.thr2)*t2
u16 | c(NA, NA)*t3 + c(u16.thr3, u16.thr3)*t3
u16 | c(NA, NA)*t4 + c(u16.thr4, u16.thr4)*t4
## intercepts:
u1 ~ c(nu.1.g1, nu.1.g2)*1 + c(0, NA)*1
u2 ~ c(nu.2.g1, nu.2.g2)*1 + c(0, NA)*1
u3 ~ c(nu.3, nu.3)*1 + c(0, 0)*1
u4 ~ c(nu.4, nu.4)*1 + c(0, 0)*1
u5 ~ c(nu.5, nu.5)*1 + c(0, 0)*1
u6 ~ c(nu.6.g1, nu.6.g2)*1 + c(0, NA)*1
u13 ~ c(nu.7, nu.7)*1 + c(0, 0)*1
u7 ~ c(nu.8, nu.8)*1 + c(0, 0)*1
u8 ~ c(nu.9, nu.9)*1 + c(0, 0)*1
u9 ~ c(nu.10, nu.10)*1 + c(0, 0)*1
u10 ~ c(nu.11, nu.11)*1 + c(0, 0)*1
u11 ~ c(nu.12, nu.12)*1 + c(0, 0)*1
u12 ~ c(nu.13, nu.13)*1 + c(0, 0)*1
u14 ~ c(nu.14, nu.14)*1 + c(0, 0)*1
u15 ~ c(nu.15, nu.15)*1 + c(0, 0)*1
u16 ~ c(nu.16, nu.16)*1 + c(0, 0)*1
## unique-factor variances:
u1 ~~ c(1, NA)*u1 + c(theta.1_1.g1, theta.1_1.g2)*u1
u2 ~~ c(1, NA)*u2 + c(theta.2_2.g1, theta.2_2.g2)*u2
u3 ~~ c(1, NA)*u3 + c(theta.3_3.g1, theta.3_3.g2)*u3
u4 ~~ c(1, NA)*u4 + c(theta.4_4.g1, theta.4_4.g2)*u4
u5 ~~ c(1, NA)*u5 + c(theta.5_5.g1, theta.5_5.g2)*u5
u6 ~~ c(1, NA)*u6 + c(theta.6_6.g1, theta.6_6.g2)*u6
u13 ~~ c(1, NA)*u13 + c(theta.7_7.g1, theta.7_7.g2)*u13
u7 ~~ c(1, NA)*u7 + c(theta.8_8.g1, theta.8_8.g2)*u7
u8 ~~ c(1, NA)*u8 + c(theta.9_9.g1, theta.9_9.g2)*u8
u9 ~~ c(1, NA)*u9 + c(theta.10_10.g1, theta.10_10.g2)*u9
u10 ~~ c(1, NA)*u10 + c(theta.11_11.g1, theta.11_11.g2)*u10
u11 ~~ c(1, NA)*u11 + c(theta.12_12.g1, theta.12_12.g2)*u11
u12 ~~ c(1, NA)*u12 + c(theta.13_13.g1, theta.13_13.g2)*u12
u14 ~~ c(1, NA)*u14 + c(theta.14_14.g1, theta.14_14.g2)*u14
u15 ~~ c(1, NA)*u15 + c(theta.15_15.g1, theta.15_15.g2)*u15
u16 ~~ c(1, NA)*u16 + c(theta.16_16.g1, theta.16_16.g2)*u16
## latent means/intercepts:
f1 ~ c(alpha.1.g1, alpha.1.g2)*1 + c(0, NA)*1
f2 ~ c(alpha.2.g1, alpha.2.g2)*1 + c(0, NA)*1
f3 ~ c(alpha.3.g1, alpha.3.g2)*1 + c(0, NA)*1
g1 ~ c(alpha.4.g1, alpha.4.g2)*1 + c(0, NA)*1
## common-factor variances:
f1 ~~ c(1, NA)*f1 + c(psi.1_1.g1, psi.1_1.g2)*f1
f2 ~~ c(1, NA)*f2 + c(psi.2_2.g1, psi.2_2.g2)*f2
f3 ~~ c(1, NA)*f3 + c(psi.3_3.g1, psi.3_3.g2)*f3
g1 ~~ c(1, NA)*g1 + c(psi.4_4.g1, psi.4_4.g2)*g1
## common-factor covariances:
f1 ~~ c(0, 0)*f2 + c(psi.2_1.g1, psi.2_1.g2)*f2
f1 ~~ c(0, 0)*f3 + c(psi.3_1.g1, psi.3_1.g2)*f3
f1 ~~ c(0, 0)*g1 + c(psi.4_1.g1, psi.4_1.g2)*g1
f2 ~~ c(0, 0)*f3 + c(psi.3_2.g1, psi.3_2.g2)*f3
f2 ~~ c(0, 0)*g1 + c(psi.4_2.g1, psi.4_2.g2)*g1
f3 ~~ c(0, 0)*g1 + c(psi.4_3.g1, psi.4_3.g2)*g1
'
fit.scalar.p3 <- cfa(mod.scalar.p3, data = all, ordered = paste0("u", 1:16), parameterization = "theta", group = "gender")

### COMPARING FIT OF PARTIALLY INVARIANT SCALAR MODEL AND METRIC MODEL ###
compareFit(fit.metric,fit.scalar.p3)

### DETERMINING FOURTH ITEM INTERCEPT TO FREE ###
intercept.4 <- miPowerFit(fit.scalar.p3)

### FITTING PARTIALLY INVARIANT SCALAR MODEL WITH FOUR FREED INTERCEPTS ###
syntax.scalar.p4 <- measEq.syntax(configural.model = mod.cat, data = all, ordered = paste0("u", 1:16), parameterization = "theta", estimator = "WLSMV", ID.fac = "UV", ID.cat = "Wu.Estabrook.2016", group = "gender", orthogonal = TRUE, group.equal = c("thresholds","loadings","intercepts"), group.partial = c("u1 ~1", "u6 ~1", "u2 ~1", "u9 ~1"))
cat(as.character(syntax.scalar.p4))
mod.scalar.p4 <- '
## loadings:
f1 =~ c(NA, NA)*u1 + c(lambda.1_1, lambda.1_1)*u1
f1 =~ c(NA, NA)*u2 + c(lambda.2_1, lambda.2_1)*u2
f1 =~ c(NA, NA)*u3 + c(lambda.3_1, lambda.3_1)*u3
f1 =~ c(NA, NA)*u4 + c(lambda.4_1, lambda.4_1)*u4
f1 =~ c(NA, NA)*u5 + c(lambda.5_1, lambda.5_1)*u5
f1 =~ c(NA, NA)*u6 + c(lambda.6_1, lambda.6_1)*u6
f1 =~ c(NA, NA)*u13 + c(lambda.7_1, lambda.7_1)*u13
f2 =~ c(NA, NA)*u7 + c(lambda.8_2, lambda.8_2)*u7
f2 =~ c(NA, NA)*u8 + c(lambda.9_2, lambda.9_2)*u8
f2 =~ c(NA, NA)*u9 + c(lambda.10_2, lambda.10_2)*u9
f2 =~ c(NA, NA)*u10 + c(lambda.11_2, lambda.11_2)*u10
f3 =~ c(NA, NA)*u11 + c(lambda.12_3, lambda.12_3)*u11
f3 =~ c(NA, NA)*u12 + c(lambda.13_3, lambda.13_3)*u12
f3 =~ c(NA, NA)*u14 + c(lambda.14_3, lambda.14_3)*u14
f3 =~ c(NA, NA)*u15 + c(lambda.15_3, lambda.15_3)*u15
f3 =~ c(NA, NA)*u16 + c(lambda.16_3, lambda.16_3)*u16
g1 =~ c(NA, NA)*u1 + c(lambda.1_4, lambda.1_4)*u1
g1 =~ c(NA, NA)*u2 + c(lambda.2_4, lambda.2_4)*u2
g1 =~ c(NA, NA)*u3 + c(lambda.3_4, lambda.3_4)*u3
g1 =~ c(NA, NA)*u4 + c(lambda.4_4, lambda.4_4)*u4
g1 =~ c(NA, NA)*u5 + c(lambda.5_4, lambda.5_4)*u5
g1 =~ c(NA, NA)*u6 + c(lambda.6_4, lambda.6_4)*u6
g1 =~ c(NA, NA)*u13 + c(lambda.7_4, lambda.7_4)*u13
g1 =~ c(NA, NA)*u7 + c(lambda.8_4, lambda.8_4)*u7
g1 =~ c(NA, NA)*u8 + c(lambda.9_4, lambda.9_4)*u8
g1 =~ c(NA, NA)*u9 + c(lambda.10_4, lambda.10_4)*u9
g1 =~ c(NA, NA)*u10 + c(lambda.11_4, lambda.11_4)*u10
g1 =~ c(NA, NA)*u11 + c(lambda.12_4, lambda.12_4)*u11
g1 =~ c(NA, NA)*u12 + c(lambda.13_4, lambda.13_4)*u12
g1 =~ c(NA, NA)*u14 + c(lambda.14_4, lambda.14_4)*u14
g1 =~ c(NA, NA)*u15 + c(lambda.15_4, lambda.15_4)*u15
g1 =~ c(NA, NA)*u16 + c(lambda.16_4, lambda.16_4)*u16
## thresholds:
u1 | c(NA, NA)*t1 + c(u1.thr1, u1.thr1)*t1
u1 | c(NA, NA)*t2 + c(u1.thr2, u1.thr2)*t2
u1 | c(NA, NA)*t3 + c(u1.thr3, u1.thr3)*t3
u1 | c(NA, NA)*t4 + c(u1.thr4, u1.thr4)*t4
u2 | c(NA, NA)*t1 + c(u2.thr1, u2.thr1)*t1
u2 | c(NA, NA)*t2 + c(u2.thr2, u2.thr2)*t2
u2 | c(NA, NA)*t3 + c(u2.thr3, u2.thr3)*t3
u2 | c(NA, NA)*t4 + c(u2.thr4, u2.thr4)*t4
u3 | c(NA, NA)*t1 + c(u3.thr1, u3.thr1)*t1
u3 | c(NA, NA)*t2 + c(u3.thr2, u3.thr2)*t2
u3 | c(NA, NA)*t3 + c(u3.thr3, u3.thr3)*t3
u3 | c(NA, NA)*t4 + c(u3.thr4, u3.thr4)*t4
u4 | c(NA, NA)*t1 + c(u4.thr1, u4.thr1)*t1
u4 | c(NA, NA)*t2 + c(u4.thr2, u4.thr2)*t2
u4 | c(NA, NA)*t3 + c(u4.thr3, u4.thr3)*t3
u4 | c(NA, NA)*t4 + c(u4.thr4, u4.thr4)*t4
u5 | c(NA, NA)*t1 + c(u5.thr1, u5.thr1)*t1
u5 | c(NA, NA)*t2 + c(u5.thr2, u5.thr2)*t2
u5 | c(NA, NA)*t3 + c(u5.thr3, u5.thr3)*t3
u5 | c(NA, NA)*t4 + c(u5.thr4, u5.thr4)*t4
u6 | c(NA, NA)*t1 + c(u6.thr1, u6.thr1)*t1
u6 | c(NA, NA)*t2 + c(u6.thr2, u6.thr2)*t2
u6 | c(NA, NA)*t3 + c(u6.thr3, u6.thr3)*t3
u6 | c(NA, NA)*t4 + c(u6.thr4, u6.thr4)*t4
u13 | c(NA, NA)*t1 + c(u13.thr1, u13.thr1)*t1
u13 | c(NA, NA)*t2 + c(u13.thr2, u13.thr2)*t2
u13 | c(NA, NA)*t3 + c(u13.thr3, u13.thr3)*t3
u13 | c(NA, NA)*t4 + c(u13.thr4, u13.thr4)*t4
u7 | c(NA, NA)*t1 + c(u7.thr1, u7.thr1)*t1
u7 | c(NA, NA)*t2 + c(u7.thr2, u7.thr2)*t2
u7 | c(NA, NA)*t3 + c(u7.thr3, u7.thr3)*t3
u7 | c(NA, NA)*t4 + c(u7.thr4, u7.thr4)*t4
u8 | c(NA, NA)*t1 + c(u8.thr1, u8.thr1)*t1
u8 | c(NA, NA)*t2 + c(u8.thr2, u8.thr2)*t2
u8 | c(NA, NA)*t3 + c(u8.thr3, u8.thr3)*t3
u8 | c(NA, NA)*t4 + c(u8.thr4, u8.thr4)*t4
u9 | c(NA, NA)*t1 + c(u9.thr1, u9.thr1)*t1
u9 | c(NA, NA)*t2 + c(u9.thr2, u9.thr2)*t2
u9 | c(NA, NA)*t3 + c(u9.thr3, u9.thr3)*t3
u9 | c(NA, NA)*t4 + c(u9.thr4, u9.thr4)*t4
u10 | c(NA, NA)*t1 + c(u10.thr1, u10.thr1)*t1
u10 | c(NA, NA)*t2 + c(u10.thr2, u10.thr2)*t2
u10 | c(NA, NA)*t3 + c(u10.thr3, u10.thr3)*t3
u10 | c(NA, NA)*t4 + c(u10.thr4, u10.thr4)*t4
u11 | c(NA, NA)*t1 + c(u11.thr1, u11.thr1)*t1
u11 | c(NA, NA)*t2 + c(u11.thr2, u11.thr2)*t2
u11 | c(NA, NA)*t3 + c(u11.thr3, u11.thr3)*t3
u11 | c(NA, NA)*t4 + c(u11.thr4, u11.thr4)*t4
u12 | c(NA, NA)*t1 + c(u12.thr1, u12.thr1)*t1
u12 | c(NA, NA)*t2 + c(u12.thr2, u12.thr2)*t2
u12 | c(NA, NA)*t3 + c(u12.thr3, u12.thr3)*t3
u12 | c(NA, NA)*t4 + c(u12.thr4, u12.thr4)*t4
u14 | c(NA, NA)*t1 + c(u14.thr1, u14.thr1)*t1
u14 | c(NA, NA)*t2 + c(u14.thr2, u14.thr2)*t2
u14 | c(NA, NA)*t3 + c(u14.thr3, u14.thr3)*t3
u14 | c(NA, NA)*t4 + c(u14.thr4, u14.thr4)*t4
u15 | c(NA, NA)*t1 + c(u15.thr1, u15.thr1)*t1
u15 | c(NA, NA)*t2 + c(u15.thr2, u15.thr2)*t2
u15 | c(NA, NA)*t3 + c(u15.thr3, u15.thr3)*t3
u15 | c(NA, NA)*t4 + c(u15.thr4, u15.thr4)*t4
u16 | c(NA, NA)*t1 + c(u16.thr1, u16.thr1)*t1
u16 | c(NA, NA)*t2 + c(u16.thr2, u16.thr2)*t2
u16 | c(NA, NA)*t3 + c(u16.thr3, u16.thr3)*t3
u16 | c(NA, NA)*t4 + c(u16.thr4, u16.thr4)*t4
## intercepts:
u1 ~ c(nu.1.g1, nu.1.g2)*1 + c(0, NA)*1
u2 ~ c(nu.2.g1, nu.2.g2)*1 + c(0, NA)*1
u3 ~ c(nu.3, nu.3)*1 + c(0, 0)*1
u4 ~ c(nu.4, nu.4)*1 + c(0, 0)*1
u5 ~ c(nu.5, nu.5)*1 + c(0, 0)*1
u6 ~ c(nu.6.g1, nu.6.g2)*1 + c(0, NA)*1
u13 ~ c(nu.7, nu.7)*1 + c(0, 0)*1
u7 ~ c(nu.8, nu.8)*1 + c(0, 0)*1
u8 ~ c(nu.9, nu.9)*1 + c(0, 0)*1
u9 ~ c(nu.10.g1, nu.10.g2)*1 + c(0, NA)*1
u10 ~ c(nu.11, nu.11)*1 + c(0, 0)*1
u11 ~ c(nu.12, nu.12)*1 + c(0, 0)*1
u12 ~ c(nu.13, nu.13)*1 + c(0, 0)*1
u14 ~ c(nu.14, nu.14)*1 + c(0, 0)*1
u15 ~ c(nu.15, nu.15)*1 + c(0, 0)*1
u16 ~ c(nu.16, nu.16)*1 + c(0, 0)*1
## unique-factor variances:
u1 ~~ c(1, NA)*u1 + c(theta.1_1.g1, theta.1_1.g2)*u1
u2 ~~ c(1, NA)*u2 + c(theta.2_2.g1, theta.2_2.g2)*u2
u3 ~~ c(1, NA)*u3 + c(theta.3_3.g1, theta.3_3.g2)*u3
u4 ~~ c(1, NA)*u4 + c(theta.4_4.g1, theta.4_4.g2)*u4
u5 ~~ c(1, NA)*u5 + c(theta.5_5.g1, theta.5_5.g2)*u5
u6 ~~ c(1, NA)*u6 + c(theta.6_6.g1, theta.6_6.g2)*u6
u13 ~~ c(1, NA)*u13 + c(theta.7_7.g1, theta.7_7.g2)*u13
u7 ~~ c(1, NA)*u7 + c(theta.8_8.g1, theta.8_8.g2)*u7
u8 ~~ c(1, NA)*u8 + c(theta.9_9.g1, theta.9_9.g2)*u8
u9 ~~ c(1, NA)*u9 + c(theta.10_10.g1, theta.10_10.g2)*u9
u10 ~~ c(1, NA)*u10 + c(theta.11_11.g1, theta.11_11.g2)*u10
u11 ~~ c(1, NA)*u11 + c(theta.12_12.g1, theta.12_12.g2)*u11
u12 ~~ c(1, NA)*u12 + c(theta.13_13.g1, theta.13_13.g2)*u12
u14 ~~ c(1, NA)*u14 + c(theta.14_14.g1, theta.14_14.g2)*u14
u15 ~~ c(1, NA)*u15 + c(theta.15_15.g1, theta.15_15.g2)*u15
u16 ~~ c(1, NA)*u16 + c(theta.16_16.g1, theta.16_16.g2)*u16
## latent means/intercepts:
f1 ~ c(alpha.1.g1, alpha.1.g2)*1 + c(0, NA)*1
f2 ~ c(alpha.2.g1, alpha.2.g2)*1 + c(0, NA)*1
f3 ~ c(alpha.3.g1, alpha.3.g2)*1 + c(0, NA)*1
g1 ~ c(alpha.4.g1, alpha.4.g2)*1 + c(0, NA)*1
## common-factor variances:
f1 ~~ c(1, NA)*f1 + c(psi.1_1.g1, psi.1_1.g2)*f1
f2 ~~ c(1, NA)*f2 + c(psi.2_2.g1, psi.2_2.g2)*f2
f3 ~~ c(1, NA)*f3 + c(psi.3_3.g1, psi.3_3.g2)*f3
g1 ~~ c(1, NA)*g1 + c(psi.4_4.g1, psi.4_4.g2)*g1
## common-factor covariances:
f1 ~~ c(0, 0)*f2 + c(psi.2_1.g1, psi.2_1.g2)*f2
f1 ~~ c(0, 0)*f3 + c(psi.3_1.g1, psi.3_1.g2)*f3
f1 ~~ c(0, 0)*g1 + c(psi.4_1.g1, psi.4_1.g2)*g1
f2 ~~ c(0, 0)*f3 + c(psi.3_2.g1, psi.3_2.g2)*f3
f2 ~~ c(0, 0)*g1 + c(psi.4_2.g1, psi.4_2.g2)*g1
f3 ~~ c(0, 0)*g1 + c(psi.4_3.g1, psi.4_3.g2)*g1
'
fit.scalar.p4 <- cfa(mod.scalar.p4, data = all, ordered = paste0("u", 1:16), parameterization = "theta", group = "gender")

### COMPARING FIT OF PARTIALLY INVARIANT SCALAR MODEL AND METRIC MODEL ###
compareFit(fit.metric,fit.scalar.p4)

### GENERATING LATENT VARIABLE SCORES ###
idx <- lavInspect(fit.scalar.p4,"case.idx")
fscores <- lavPredict(fit.scalar.p4, newdata = all)
for (g in seq_along(fscores)) {
    for (fs in colnames(fscores[[g]])) {
        all[ idx[[g]], fs] <- fscores[[g]][ , fs]
    }
}

### TESTING EFFECTS OF AGE AND GENDER ON CNI SCORES ###
all <- all %>% mutate_at(c(paste0("u", 1:16)),as.numeric)
all$CNI <- (all$u1 + all$u2 + all$u3 + all$u4 + all$u5 + all$u6 + all$u7 + all$u8 + all$u9 + all$u10 + all$u11 + all$u12 + all$u13 + all$u14 + all$u15 + all$u16)/16
CNI.art <- art(all$CNI ~ gender * age, data = all)
anova(CNI.art)
CNI.age <- emmeans(artlm(CNI.art, "age"), pairwise~age)
CNI.gender <- emmeans(artlm(CNI.art,"gender"), pairwise~gender)


### TESTING EFFECTS OF AGE AND GENDER ON LATENT VARIABLE SCORES ###

g1.art <- art(all$g1 ~ gender * age, data = all)
anova(g1.art)
g1.age <- emmeans(artlm(g1.art, "age"), pairwise~age)
g1.interaction <- contrast(emmeans(artlm(g1.art, "gender:age"), ~ gender:age), method = "pairwise", interaction = TRUE)

f1.art<-art(all$f1 ~ gender * age, data = all)
anova(f1.art)
f1.age <- emmeans(artlm(f1.art, "age"), pairwise~age)

f2.art<-art(all$f2 ~ gender * age, data = all)
anova(f2.art)
f2.gender <- emmeans(artlm(f2.art, "gender"), pairwise~gender)

f3.art<-art(all$f3 ~ gender * age, data = all)
anova(f3.art)
f3.gender <- emmeans(artlm(f3.art, "gender"), pairwise~gender)


### RUNNING BINARY LOGISTIC REGRESSIONS FOR ENVIRONMENTAL BEHAVIORS ###

all$age <- as.numeric(all$age) + 7

logit.water <- glm(water~age+gender+CNI, data = all, family = "binomial")
logitgof(all$water, fitted(logit.water), g = 5, ord = TRUE)
p.water <- exp(cbind(OR = coef(logit.water), confint(logit.water)))

logit.energy <- glm(energy~age+gender+CNI, data = all, family = "binomial")
logitgof(all$energy, fitted(logit.energy), g = 5, ord = TRUE)
p.water <- exp(cbind(OR = coef(logit.energy), confint(logit.energy)))

logit.recycle <- glm(recycle~age+gender+CNI, data = all, family = "binomial")
logitgof(all$recycle, fitted(logit.recycle), g = 5, ord = TRUE)
p.water <- exp(cbind(OR = coef(logit.recycle), confint(logit.recycle)))

logit.volunteer <- glm(volunteer~age+gender+CNI, data = all, family = "binomial")
logitgof(all$volunteer, fitted(logit.volunteer), g = 5, ord = TRUE)
p.water <- exp(cbind(OR = coef(logit.volunteer), confint(logit.volunteer)))

logit.donate <- glm(donate~age+gender+CNI, data = all, family = "binomial")
logitgof(all$donate, fitted(logit.donate), g = 5, ord = TRUE)
p.water <- exp(cbind(OR = coef(logit.donate), confint(logit.donate)))

logit.advocate <- glm(advocate~age+gender+CNI, data = all, family = "binomial")
logitgof(all$advocate, fitted(logit.advocate), g = 5, ord = TRUE)
p.water <- exp(cbind(OR = coef(logit.advocate), confint(logit.advocate)))
